{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "cart-updated",
  "type": "registry:component",
  "title": "Cart Updated",
  "description": "Cart update confirmation component showing changes made",
  "registryDependencies": [
    "badge",
    "https://registry-starter.vercel.app/r/theme.json"
  ],
  "files": [
    {
      "path": "src/components/ui/cart-updated.tsx",
      "content": "import type * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\n\nfunction CartUpdated({ className, ...props }: React.ComponentProps<\"div\">) {\n\treturn (\n\t\t<div\n\t\t\tdata-slot=\"cart-updated\"\n\t\t\tclassName={cn(\"space-y-4\", className)}\n\t\t\t{...props}\n\t\t/>\n\t);\n}\n\nfunction CartUpdatedHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n\treturn (\n\t\t<div\n\t\t\tdata-slot=\"cart-updated-header\"\n\t\t\tclassName={cn(\"flex items-center gap-2\", className)}\n\t\t\t{...props}\n\t\t/>\n\t);\n}\n\nfunction CartUpdatedIcon({ className, ...props }: React.ComponentProps<\"div\">) {\n\treturn (\n\t\t<div\n\t\t\tdata-slot=\"cart-updated-icon\"\n\t\t\tclassName={cn(\"size-4\", className)}\n\t\t\t{...props}\n\t\t/>\n\t);\n}\n\nfunction CartUpdatedTitle({ className, ...props }: React.ComponentProps<\"h4\">) {\n\treturn (\n\t\t<h4\n\t\t\tdata-slot=\"cart-updated-title\"\n\t\t\tclassName={cn(\"font-medium text-sm\", className)}\n\t\t\t{...props}\n\t\t/>\n\t);\n}\n\nfunction CartUpdatedChanges({ className, ...props }: React.ComponentProps<\"div\">) {\n\treturn (\n\t\t<div\n\t\t\tdata-slot=\"cart-updated-changes\"\n\t\t\tclassName={cn(\"space-y-2\", className)}\n\t\t\t{...props}\n\t\t/>\n\t);\n}\n\nfunction CartUpdatedChangesTitle({ className, ...props }: React.ComponentProps<\"h5\">) {\n\treturn (\n\t\t<h5\n\t\t\tdata-slot=\"cart-updated-changes-title\"\n\t\t\tclassName={cn(\"text-xs font-medium text-muted-foreground uppercase tracking-wide\", className)}\n\t\t\t{...props}\n\t\t/>\n\t);\n}\n\nfunction CartUpdatedItems({ className, ...props }: React.ComponentProps<\"div\">) {\n\treturn (\n\t\t<div\n\t\t\tdata-slot=\"cart-updated-items\"\n\t\t\tclassName={cn(\"grid gap-2\", className)}\n\t\t\t{...props}\n\t\t/>\n\t);\n}\n\nfunction CartUpdatedItem({ className, ...props }: React.ComponentProps<\"div\">) {\n\treturn (\n\t\t<div\n\t\t\tdata-slot=\"cart-updated-item\"\n\t\t\tclassName={cn(\"flex items-center gap-3 rounded-lg border p-2 bg-muted/20\", className)}\n\t\t\t{...props}\n\t\t/>\n\t);\n}\n\nfunction CartUpdatedItemIcon({ className, ...props }: React.ComponentProps<\"div\">) {\n\treturn (\n\t\t<div\n\t\t\tdata-slot=\"cart-updated-item-icon\"\n\t\t\tclassName={cn(\"size-4\", className)}\n\t\t\t{...props}\n\t\t/>\n\t);\n}\n\nfunction CartUpdatedItemContent({ className, ...props }: React.ComponentProps<\"div\">) {\n\treturn (\n\t\t<div\n\t\t\tdata-slot=\"cart-updated-item-content\"\n\t\t\tclassName={cn(\"flex-1 min-w-0\", className)}\n\t\t\t{...props}\n\t\t/>\n\t);\n}\n\nfunction CartUpdatedItemTitle({ className, ...props }: React.ComponentProps<\"p\">) {\n\treturn (\n\t\t<p\n\t\t\tdata-slot=\"cart-updated-item-title\"\n\t\t\tclassName={cn(\"font-medium text-sm truncate\", className)}\n\t\t\t{...props}\n\t\t/>\n\t);\n}\n\nfunction CartUpdatedItemDetails({ className, ...props }: React.ComponentProps<\"div\">) {\n\treturn (\n\t\t<div\n\t\t\tdata-slot=\"cart-updated-item-details\"\n\t\t\tclassName={cn(\"flex items-center gap-2 text-xs text-muted-foreground\", className)}\n\t\t\t{...props}\n\t\t/>\n\t);\n}\n\nfunction CartUpdatedItemBadge({ className, ...props }: React.ComponentProps<\"div\">) {\n\treturn (\n\t\t<div\n\t\t\tdata-slot=\"cart-updated-item-badge\"\n\t\t\tclassName={cn(\"text-xs\", className)}\n\t\t\t{...props}\n\t\t/>\n\t);\n}\n\nfunction CartUpdatedActions({ className, ...props }: React.ComponentProps<\"div\">) {\n\treturn (\n\t\t<div\n\t\t\tdata-slot=\"cart-updated-actions\"\n\t\t\tclassName={cn(\"pt-2 border-t\", className)}\n\t\t\t{...props}\n\t\t/>\n\t);\n}\n\nfunction CartUpdatedViewCart({ className, ...props }: React.ComponentProps<\"a\">) {\n\treturn (\n\t\t<a\n\t\t\tdata-slot=\"cart-updated-view-cart\"\n\t\t\tclassName={cn(\n\t\t\t\t\"flex items-center justify-center gap-2 w-full bg-secondary text-secondary-foreground hover:bg-secondary/80 rounded-md px-3 py-2 text-sm transition-colors\",\n\t\t\t\tclassName\n\t\t\t)}\n\t\t\ttarget=\"_blank\"\n\t\t\trel=\"noopener noreferrer\"\n\t\t\t{...props}\n\t\t/>\n\t);\n}\n\nexport {\n\tCartUpdated,\n\tCartUpdatedHeader,\n\tCartUpdatedIcon,\n\tCartUpdatedTitle,\n\tCartUpdatedChanges,\n\tCartUpdatedChangesTitle,\n\tCartUpdatedItems,\n\tCartUpdatedItem,\n\tCartUpdatedItemIcon,\n\tCartUpdatedItemContent,\n\tCartUpdatedItemTitle,\n\tCartUpdatedItemDetails,\n\tCartUpdatedItemBadge,\n\tCartUpdatedActions,\n\tCartUpdatedViewCart,\n};\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/cart-updated.tsx",
      "content": "import {\n\tCheckCircleIcon,\n\tMinusIcon,\n\tPlusIcon,\n\tShoppingCartIcon,\n\tXIcon,\n} from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n\tCartUpdated,\n\tCartUpdatedActions,\n\tCartUpdatedChanges,\n\tCartUpdatedChangesTitle,\n\tCartUpdatedHeader,\n\tCartUpdatedIcon,\n\tCartUpdatedItem,\n\tCartUpdatedItemBadge,\n\tCartUpdatedItemContent,\n\tCartUpdatedItemDetails,\n\tCartUpdatedItemIcon,\n\tCartUpdatedItems,\n\tCartUpdatedItemTitle,\n\tCartUpdatedTitle,\n\tCartUpdatedViewCart,\n} from \"@/components/ui/cart-updated\";\n\n// Shopify cart types\ninterface ShopifyCartLine {\n\tid: string;\n\tquantity: number;\n\tcost: {\n\t\ttotal_amount: {\n\t\t\tamount: string;\n\t\t\tcurrency: string;\n\t\t};\n\t\tsubtotal_amount: {\n\t\t\tamount: string;\n\t\t\tcurrency: string;\n\t\t};\n\t};\n\tmerchandise: {\n\t\tid: string;\n\t\ttitle: string;\n\t\tproduct: {\n\t\t\tid: string;\n\t\t\ttitle: string;\n\t\t};\n\t};\n}\n\ninterface ShopifyCart {\n\tid: string;\n\tcreated_at: string;\n\tupdated_at: string;\n\tlines: ShopifyCartLine[];\n\tdelivery: Record<string, any>;\n\tdiscounts: Record<string, any>;\n\tgift_cards: any[];\n\tcost: {\n\t\ttotal_amount: {\n\t\t\tamount: string;\n\t\t\tcurrency: string;\n\t\t};\n\t\tsubtotal_amount: {\n\t\t\tamount: string;\n\t\t\tcurrency: string;\n\t\t};\n\t\ttotal_tax_amount?: {\n\t\t\tamount: string;\n\t\t\tcurrency: string;\n\t\t};\n\t};\n\ttotal_quantity: number;\n\tcheckout_url: string;\n}\n\n// Simplified update item for display\ninterface UpdatedItem {\n\tid: string;\n\ttitle: string;\n\tquantity: number;\n\taction: string;\n\tvariant?: string;\n\tpreviousQuantity?: number;\n}\n\ninterface CartUpdatedComponentProps {\n\tinstructions?: string;\n\tcart?: ShopifyCart;\n\terrors?: any[];\n\tupdatedItems?: UpdatedItem[];\n}\n\n// Mock Shopify cart data based on the example provided\nconst mockCart: ShopifyCart = {\n\tid: \"gid://shopify/Cart/hWN1YuVAnGXUipguqgELC4kV?key=c8fe3d5a36146ec30e34c140a072b4bc\",\n\tcreated_at: \"2025-08-08T12:23:51.696Z\",\n\tupdated_at: \"2025-08-08T12:23:51.696Z\",\n\tlines: [\n\t\t{\n\t\t\tid: \"gid://shopify/CartLine/05aff3c5-d3fe-4dd8-b257-327c607ad906?cart=hWN1YuVAnGXUipguqgELC4kV\",\n\t\t\tquantity: 1,\n\t\t\tcost: {\n\t\t\t\ttotal_amount: {\n\t\t\t\t\tamount: \"19.95\",\n\t\t\t\t\tcurrency: \"USD\",\n\t\t\t\t},\n\t\t\t\tsubtotal_amount: {\n\t\t\t\t\tamount: \"19.95\",\n\t\t\t\t\tcurrency: \"USD\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tmerchandise: {\n\t\t\t\tid: \"gid://shopify/ProductVariant/14574992523362\",\n\t\t\t\ttitle: \"3.5 oz (100g) Tin\",\n\t\t\t\tproduct: {\n\t\t\t\t\tid: \"gid://shopify/Product/1614972518498\",\n\t\t\t\t\ttitle: \"Culinary Grade Matcha Powder\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t],\n\tdelivery: {},\n\tdiscounts: {},\n\tgift_cards: [],\n\tcost: {\n\t\ttotal_amount: {\n\t\t\tamount: \"19.95\",\n\t\t\tcurrency: \"USD\",\n\t\t},\n\t\tsubtotal_amount: {\n\t\t\tamount: \"19.95\",\n\t\t\tcurrency: \"USD\",\n\t\t},\n\t\ttotal_tax_amount: {\n\t\t\tamount: \"0.0\",\n\t\t\tcurrency: \"USD\",\n\t\t},\n\t},\n\ttotal_quantity: 1,\n\tcheckout_url:\n\t\t\"https://itoen.com/cart/c/hWN1YuVAnGXUipguqgELC4kV?key=c8fe3d5a36146ec30e34c140a072b4bc\",\n};\n\n// Mock updated items to show what changed\nconst mockUpdatedItems: UpdatedItem[] = [\n\t{\n\t\tid: \"1\",\n\t\ttitle: \"Culinary Grade Matcha Powder\",\n\t\tvariant: \"3.5 oz (100g) Tin\",\n\t\tquantity: 1,\n\t\taction: \"added\",\n\t},\n];\n\nfunction getActionIcon(action: string) {\n\tswitch (action) {\n\t\tcase \"added\":\n\t\t\treturn PlusIcon;\n\t\tcase \"removed\":\n\t\t\treturn XIcon;\n\t\tdefault:\n\t\t\treturn MinusIcon;\n\t}\n}\n\nfunction getActionColor(action: string) {\n\tswitch (action) {\n\t\tcase \"added\":\n\t\t\treturn \"text-secondary-foreground\";\n\t\tcase \"removed\":\n\t\t\treturn \"text-destructive\";\n\t\tdefault:\n\t\t\treturn \"text-muted-foreground\";\n\t}\n}\n\nfunction getActionText(\n\taction: string,\n\tquantity: number,\n\tpreviousQuantity?: number,\n) {\n\tswitch (action) {\n\t\tcase \"added\":\n\t\t\treturn `Added ${quantity} ${quantity === 1 ? \"item\" : \"items\"}`;\n\t\tcase \"removed\":\n\t\t\treturn `Removed ${quantity} ${quantity === 1 ? \"item\" : \"items\"}`;\n\t\tcase \"updated\":\n\t\t\tif (previousQuantity) {\n\t\t\t\treturn `Changed quantity from ${previousQuantity} to ${quantity}`;\n\t\t\t}\n\t\t\treturn `Updated to ${quantity} ${quantity === 1 ? \"item\" : \"items\"}`;\n\t\tdefault:\n\t\t\treturn `Updated ${quantity} ${quantity === 1 ? \"item\" : \"items\"}`;\n\t}\n}\n\nfunction getActionBadgeText(action: string) {\n\tswitch (action) {\n\t\tcase \"added\":\n\t\t\treturn \"Added\";\n\t\tcase \"removed\":\n\t\t\treturn \"Removed\";\n\t\tdefault:\n\t\t\treturn \"Updated\";\n\t}\n}\n\nfunction formatCurrency(currency: string): string {\n\t// Map common currency codes to symbols\n\tconst currencySymbols: Record<string, string> = {\n\t\tUSD: \"$\",\n\t\tEUR: \"€\",\n\t\tGBP: \"£\",\n\t\tCAD: \"$\",\n\t\tAUD: \"$\",\n\t\tJPY: \"¥\",\n\t};\n\treturn currencySymbols[currency] || currency;\n}\n\nexport function CartUpdatedComponent({\n\tinstructions = \"Cart updated successfully\",\n\tcart = mockCart,\n\terrors = [],\n\tupdatedItems = mockUpdatedItems,\n}: CartUpdatedComponentProps) {\n\tconst hasErrors = errors && errors.length > 0;\n\tconst currencySymbol = formatCurrency(cart.cost.total_amount.currency);\n\n\treturn (\n\t\t<CartUpdated className=\"w-[400px]\">\n\t\t\t<CartUpdatedHeader>\n\t\t\t\t<CartUpdatedIcon>\n\t\t\t\t\t<CheckCircleIcon className=\"size-4 text-secondary-foreground\" />\n\t\t\t\t</CartUpdatedIcon>\n\t\t\t\t<CartUpdatedTitle>{instructions}</CartUpdatedTitle>\n\t\t\t\t<Badge variant=\"secondary\">\n\t\t\t\t\t{cart.total_quantity} total{\" \"}\n\t\t\t\t\t{cart.total_quantity === 1 ? \"item\" : \"items\"}\n\t\t\t\t</Badge>\n\t\t\t</CartUpdatedHeader>\n\n\t\t\t{updatedItems.length > 0 && (\n\t\t\t\t<CartUpdatedChanges>\n\t\t\t\t\t<CartUpdatedChangesTitle>Changes Made</CartUpdatedChangesTitle>\n\t\t\t\t\t<CartUpdatedItems>\n\t\t\t\t\t\t{updatedItems.map((item, index) => {\n\t\t\t\t\t\t\tconst ActionIcon = getActionIcon(item.action);\n\t\t\t\t\t\t\tconst actionColor = getActionColor(item.action);\n\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<CartUpdatedItem key={item.id || index}>\n\t\t\t\t\t\t\t\t\t<CartUpdatedItemIcon>\n\t\t\t\t\t\t\t\t\t\t<ActionIcon className={actionColor} />\n\t\t\t\t\t\t\t\t\t</CartUpdatedItemIcon>\n\t\t\t\t\t\t\t\t\t<CartUpdatedItemContent>\n\t\t\t\t\t\t\t\t\t\t<CartUpdatedItemTitle>\n\t\t\t\t\t\t\t\t\t\t\t<span>{item.title}</span>\n\t\t\t\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\t\t\t\t{item.variant && (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"text-muted-foreground text-sm ml-2\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t({item.variant})\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t</CartUpdatedItemTitle>\n\t\t\t\t\t\t\t\t\t\t<CartUpdatedItemDetails>\n\t\t\t\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\t\t\t\t{getActionText(\n\t\t\t\t\t\t\t\t\t\t\t\t\titem.action,\n\t\t\t\t\t\t\t\t\t\t\t\t\titem.quantity,\n\t\t\t\t\t\t\t\t\t\t\t\t\titem.previousQuantity,\n\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t</CartUpdatedItemDetails>\n\t\t\t\t\t\t\t\t\t</CartUpdatedItemContent>\n\t\t\t\t\t\t\t\t\t<CartUpdatedItemBadge>\n\t\t\t\t\t\t\t\t\t\t<Badge variant=\"outline\" className={actionColor}>\n\t\t\t\t\t\t\t\t\t\t\t{getActionBadgeText(item.action)}\n\t\t\t\t\t\t\t\t\t\t</Badge>\n\t\t\t\t\t\t\t\t\t</CartUpdatedItemBadge>\n\t\t\t\t\t\t\t\t</CartUpdatedItem>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</CartUpdatedItems>\n\t\t\t\t</CartUpdatedChanges>\n\t\t\t)}\n\n\t\t\t{/* Show cart summary */}\n\t\t\t{cart.lines.length > 0 && (\n\t\t\t\t<div className=\"px-6 py-3 border-t space-y-1\">\n\t\t\t\t\t<div className=\"flex justify-between text-sm\">\n\t\t\t\t\t\t<span className=\"text-muted-foreground\">Subtotal</span>\n\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t<span>{currencySymbol}</span>\n\t\t\t\t\t\t\t<span>{cart.cost.subtotal_amount.amount}</span>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t{cart.cost.total_tax_amount &&\n\t\t\t\t\t\tparseFloat(cart.cost.total_tax_amount.amount) > 0 && (\n\t\t\t\t\t\t\t<div className=\"flex justify-between text-sm\">\n\t\t\t\t\t\t\t\t<span className=\"text-muted-foreground\">Tax</span>\n\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\t<span>{currencySymbol}</span>\n\t\t\t\t\t\t\t\t\t<span>{cart.cost.total_tax_amount.amount}</span>\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t<div className=\"flex justify-between font-semibold\">\n\t\t\t\t\t\t<span>Total</span>\n\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t<span>{currencySymbol}</span>\n\t\t\t\t\t\t\t<span>{cart.cost.total_amount.amount}</span>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t)}\n\n\t\t\t{hasErrors && (\n\t\t\t\t<div className=\"px-6 py-3 border-t\">\n\t\t\t\t\t<div className=\"text-sm text-destructive\">\n\t\t\t\t\t\t{errors.map((error, index) => (\n\t\t\t\t\t\t\t<div key={index}>{JSON.stringify(error)}</div>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t)}\n\n\t\t\t<CartUpdatedActions>\n\t\t\t\t<CartUpdatedViewCart href={cart.checkout_url}>\n\t\t\t\t\t<ShoppingCartIcon className=\"size-4\" />\n\t\t\t\t\tView Updated Cart\n\t\t\t\t</CartUpdatedViewCart>\n\t\t\t</CartUpdatedActions>\n\t\t</CartUpdated>\n\t);\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/v0/minimal-layout.tsx",
      "content": "import { Geist, Geist_Mono, Montserrat } from \"next/font/google\";\nimport React, { type ReactNode } from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nimport \"@/app/tokens.css\";\nimport \"@/app/globals.css\";\n\nconst GeistSans = Geist({\n  subsets: [\"latin\"],\n  variable: \"--font-sans\",\n});\n\nconst GeistMono = Geist_Mono({\n  subsets: [\"latin\"],\n  variable: \"--font-mono\",\n});\n\nconst MontserratSerif = Montserrat({\n  subsets: [\"latin\"],\n  variable: \"--font-serif\",\n});\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: ReactNode;\n}>) {\n  return (\n    <html\n      lang=\"en\"\n      className={cn(\n        GeistSans.variable,\n        GeistMono.variable,\n        MontserratSerif.variable,\n        \"bg-background text-foreground\",\n      )}\n    >\n      <body>\n        <main className=\"mt-16 flex w-full justify-center\">\n          <div className=\"container\">{children}</div>\n        </main>\n      </body>\n    </html>\n  );\n}\n",
      "type": "registry:file",
      "target": "app/layout.tsx"
    }
  ]
}